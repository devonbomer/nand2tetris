// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=m1out); // if A in dest, result of ALU stored in A, instead of storing instruction in A

    // A register /////////////////////////////////////////
    //-- load logic --//
    Not(in=instruction[15], out=nout); // A-instruction
    And(a=instruction[15], b=instruction[5], out=adest); // or c-inst with a-dest bit
    Or(a=nout, b=adest, out=CorA);

    ARegister(in=m1out, load=CorA, out=areg, out[0..14]=addressM);
    
    // ALU ///////////////////////////////////////////////
    //-- Select between A-reg or inM for ALU input y--//
    Mux16(a=areg, b=inM, sel=instruction[12], out=m2out); // selector doesn't matter for a-instruction

    ALU(x=dreg, y=m2out, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=zr, ng=ng);

    // D register
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=ALUout, load=loadD, out=dreg);

    // PC load logic /////////////////////////////////////
    //--Negative--//
    And(a=ng, b=instruction[2], out=j1);
    //--Equal to zero--//
    And(a=zr, b=instruction[1], out=j2);
    //--Positive--//
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    And(a=notzr, b=notng, out=notngzr);
    And(a=notngzr, b=instruction[0], out=j3);

    Or(a=j1, b=j2, out=or1);
    Or(a=or1, b=j3, out=or3);
    And(a=or3, b=instruction[15], out=jump); //3 way or and c-instruction

    Not(in=jump, out=notjump);
    
    //increment is not OR3 of load logic (if not load, increment) AND not Ainstruction
    PC(in=areg, load=jump, inc=notjump, reset=reset, out[0..14]=pc);


    //-- Write to memory M --//
    And(a=instruction[15], b=instruction[3], out=writeM); // write to M if c-inst and m in dest

}